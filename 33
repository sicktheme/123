#include <iostream>
#include <fstream>
#include <unordered_map>
#include <regex>
#include <string>
#include <ctime>
#include <cstdlib>

// Функция для загрузки словаря из файла
void loadDictionary(std::unordered_map<std::string, std::string>& dictionary) {
    std::ifstream file("C:\\Users\\house\\OneDrive\\Desktop\\dictionary.txt");

    if (!file.is_open()) {
        std::cerr << "Ошибка открытия файла!" << std::endl;
        exit(1);
    }

    std::string line;
    while (std::getline(file, line)) {
        std::smatch match;
        if (std::regex_search(line, match, std::regex(R"((\S+)\s*:\s*(.*)\s*\.)"))) {
            dictionary[match[1].str()] = match[2].str();
        }
    }
    file.close();
}

// Функция для показа текущего состояния слова
void displayMaskedWord(const std::string& word, const std::string& guessedLetters) {
    for (char ch : word) {
        if (guessedLetters.find(ch) != std::string::npos) {
            std::cout << ch;
        } else {
            std::cout << "*";
        }
    }
    std::cout << std::endl;
}

// Функция для запуска и обработки игры
void playGame() {
    std::unordered_map<std::string, std::string> dictionary;
    loadDictionary(dictionary);

    srand(time(0)); // Для случайных чисел
    bool playAgain = true;

    while (playAgain) {
        // Случайный выбор слова из словаря
        auto it = dictionary.begin();
        std::advance(it, rand() % dictionary.size());
        std::string word = it->first;
        std::string description = it->second;

        std::string guessedLetters = "";  // Строка для угаданных букв
        int attempts = 0; // Количество неправильных попыток

        std::cout << "Описание: " << description << std::endl;
        std::cout << "Отгадай слово: ";
        displayMaskedWord(word, guessedLetters);

        bool wordGuessed = false; // флаг для проверки, отгадано ли слово
        while (!wordGuessed) {
            char guessedLetter;
            std::cout << "Введите букву: ";
            std::cin >> guessedLetter;
            guessedLetter = tolower(guessedLetter); // Преобразуем в нижний регистр

            // Проверяем, если игрок уже угадал эту букву
            if (guessedLetters.find(guessedLetter) != std::string::npos) {
                std::cout << "Вы уже угадали эту букву!" << std::endl;
                continue;
            }

            guessedLetters += guessedLetter;

            // Проверка, есть ли буква в слове
            if (word.find(guessedLetter) != std::string::npos) {
                std::cout << "Правильно!" << std::endl;
            } else {
                std::cout << "Неверно!" << std::endl;
                attempts++;
            }

            // Показать текущее состояние слова
            displayMaskedWord(word, guessedLetters);

            // Проверить, отгадано ли слово
            wordGuessed = true;
            for (char ch : word) {
                if (guessedLetters.find(ch) == std::string::npos) {
                    wordGuessed = false;
                    break;
                }
            }

            if (wordGuessed) {
                std::cout << "Поздравляем! Вы отгадали слово!" << std::endl;
            }
        }

        // Спрашиваем, хочет ли игрок продолжить
        char continueGame;
        std::cout << "Хотите продолжить игру? (y/n): ";
        std::cin >> continueGame;

        if (tolower(continueGame) != 'y') {
            playAgain = false;
        }
    }
}

int main() {
    setlocale(LC_ALL, "ru");
    playGame();
    return 0;
}
